#include <stdio.h>

int answer=0;
int visit[501][501];
int N, M;
int index[501][501];


/*
int Mycalc()
{
	int k=0;
	for (int i = 0; i<N; i++)
		for (int j = 0; j < M; j++)
		{
			if (visit[i][j] == 1)
				k += index[i][j];
		}
	if (k > answer)
		answer = k;

	return 0;
}
*/

int dfs(int x, int y, int tek,int count,int result)
{
	//종료 조건 테크노 하나 다 그리면
	if (count >= 4)
	{
		if (result > answer)
			answer = result;
		return 0;
	}

	
	//우측
	if (x + 1 < M && visit[y][x+1]==0) {
		visit[y][x + 1] = 1;
		dfs(x + 1, y, 0, count + 1, result+index[y][x+1]);
		visit[y][x + 1] = 0;
	}
	//아래
	if (y + 1 < N && visit[y+1][x]==0) {
		visit[y+1][x] = 1;
		dfs(x, y + 1, 0, count + 1, result + index[y+1][x]);
		visit[y+1][x] =0;
	}
	//왼쪽
	if (x - 1 >= 0 && visit[y][x-1]==0) {
		visit[y ][x-1] = 1;
		dfs(x - 1, y, 0, count + 1, result + index[y][x -1]);
		visit[y][x-1] = 0;
	}
	//위쪽 
	if (y - 1 >= 0 && visit[y-1][x]==0) {
		visit[y-1][x] = 1;
		dfs(x, y - 1, 0, count + 1, result + index[y-1][x]);
		visit[y-1][x] = 0;
	}
	







	

	return 0;
}

int main()
{
	scanf("%d %d", &N, &M);
	
	for (int y = 0; y < N; y++)
		for(int x=0;x<M;x++)
		{
			scanf("%d", &index[y][x]);

		}
	for(int i=0;i<N;i++)
		for (int j = 0; j < M; j++) {
			visit[i][j] = 1;
			int result = index[i][j];


			if (i > N-1 < M && j+2<M)
			{
				result += index[i][j+1];
				result += index[i][j +2];
				result += index[i+1][j +1];
				if (result > answer)
					answer = result;
				
				result = index[i][j];
			}

			if (  i-2<N && j>0)
			{
				result += index[i + 1][j];
				result += index[i + 2][j];
				result+= index[i + 1][j - 1];
				if (result > answer)
					answer = result;
				result = index[i][j];
			}

			if (i-1 >=0 && j-2>=0)
			{
				result += index[i][j-1];
				result += index[i][j - 2];
				result += index[i - 1][j - 1];
				if (result > answer)
					answer = result;
				result = index[i][j];
			}

			if (i - 2>=0  && j+1<M)
			{
				result += index[i-1][j] ;
				result += index[i-2][j] ;
				result += index[i - 1][j + 1];
				if (result > answer)
					answer = result;
				result = index[i][j];
			
			}

			dfs(j, i, 0, 1, result);
			visit[i][j] = 0;
		}

	printf("%d", answer);
	getchar();
	getchar();
	return 0;
}



