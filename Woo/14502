#include <stdio.h>
#include <algorithm>
#include <queue>
#include <vector>

using namespace std;

int arr[9][9];

int temp_arr[9][9];

int N, M;

int bfs_visit[9][9];
int answer = 0;

vector<pair<int, int>> v;
queue<pair<int,int>> q;

int sol(int a, int x, int y)
{

	if (a == 3)
	{
		int temp = 0;
		
		//배열 복제
		for(int i=0;i<N;i++)
			for (int j = 0; j < M; j++)
			{
				temp_arr[i][j] = arr[i][j];
			}

		//bfs 바이러스 퍼짐 스타트
		for (int i = 0; i < v.size(); i++) {
			q.push(make_pair(v.at(i).first, v.at(i).second));
		}
		while(!q.empty())
		{
			int x = q.front().first;
			int y = q.front().second;
			q.pop();

			//위
			if (y - 1 >= 0 && temp_arr[y - 1][x] == 0)
			{
				temp_arr[y - 1][x] = 2;
				q.push(make_pair(x, y - 1));
			}
			//오른
			if (x+1 < M && temp_arr[y][x+1] == 0)
			{
				temp_arr[y][x+1] = 2;
				q.push(make_pair(x+1, y));
			}
			//아래
			if (y + 1 < N && temp_arr[y + 1][x] == 0)
			{
				temp_arr[y + 1][x] = 2;
				q.push(make_pair(x, y + 1));
			}
			//왼쪽
			if (x-1 >= 0 && temp_arr[y][x-1] == 0)
			{
				temp_arr[y][x-1] = 2;
				q.push(make_pair(x-1, y));
			}
		}
		
		//계산 
		for (int i = 0; i < N; i++)
			for (int j = 0; j < M; j++)
			{
				if (temp_arr[i][j] == 0)
					temp++;
			}

		if (answer < temp)
			answer = temp;

		return 0;
	}


	for (int i = y; i < N; i++) {
		
		int t;
		if (i != y)
			t = 0;
		else
			t = x;
		for (int j = t; j < M; j++)
		{
			if (arr[i][j] == 0) {
				arr[i][j] = 1;
				sol(a + 1, j, i);
				arr[i][j] = 0;
			}
		}
		
	}

}


int main()
{
	scanf("%d %d", &N, &M);  //N y세로   M x 가로
	
	for(int i=0;i<N;i++)
		for (int j = 0; j < M; j++)
		{
			scanf("%d", &arr[i][j]);
			if (arr[i][j] == 2)
			{
				v.push_back(make_pair(j,i));
			}

		}
	
	sol(0,0,0);

	printf("%d", answer);

}
