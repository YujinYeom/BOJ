#define _CRT_SECURE_NO_WARNINGS 

#include <stdio.h>
#include <deque>
#include <algorithm>

using namespace std; 

int N, answer;
int arr[26][26];
int visit[26][26];
deque<int> que;

int dx[4] = { 0,1,0,-1 };
int dy[4] = { -1,0,1,0 };


int boundary(int x, int y)
{
	return (x >= 0 && y >= 0 && x < N &&  y< N);
}



int main()
{
	scanf("%d", &N);

	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			scanf("%1d", &arr[i][j]);

    //bfs 탐색 할 위치 정하기
	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++) {
			if (arr[i][j] == 1 && visit[i][j] == 0)
			{
				answer++;
				visit[i][j] = 1;
				int count = 1;
				deque<pair<int,int>> deq;
				deq.push_back(make_pair(j, i));
                
                //bfs start
				while (!deq.empty())
				{
				
					int x = deq.at(0).first;
					int y = deq.at(0).second;
					deq.pop_front();

					//4방향 탐색
					for (int k = 0; k < 4; k++) {
						if (boundary(x+dx[k], y+dy[k]) && arr[y + dy[k]][x + dx[k]] == 1 && visit[y + dy[k]][x + dx[k]] == 0)
						{
							count++;
							
							visit[y + dy[k]][x + dx[k]] = 1;
							deq.push_back(make_pair(x + dx[k], y + dy[k]));
						}
					}

				}
            
				que.push_back(count);
			}
		}
    sort(que.begin(), que.end()); //오름차순 sort
    
    
    //정답출력 
	printf("%d", answer);
	while (!que.empty())
	{
		printf("\n");
		printf("%d", que.front());
		que.pop_front();
	}
	return 0;
}
