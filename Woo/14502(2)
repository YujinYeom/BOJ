#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//14502 연구소 (배열 -1로 테두리 만들어보기)

int N;//세로
int M;//가로
int max = 0;

int index[9][9];

int temp_index[9][9];

int b_curX[11];
int b_curY[11];
int b_count;
int b_ptr;

int zero_count;
int zero_ptr;
int zero_curX[100];
int zero_curY[100];
int byuk_visit[9][9];

int virus_visit[9][9];


int que[1001][2];
int front;
int end;


int* pop()
{
	front++;
	return que[front];
}
void push(int a,int b)
{
	end++;
	que[end][0] = a;
	que[end][1] = b;
}
int isEmpty()
{
	if (end == front)
		return 0;
	return 1;
}

void mycalc()
{
	int count=0;
	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++) {
			if (temp_index[i][j] == 0)
				count++;

		}

	if (count>=max)
		max = count;
}


void go_virus(int x,int y)
{
	//종료시에 계산
	
	//위
	if (y-1>=0 && temp_index[y - 1][x] == 0)
	{
		temp_index[y - 1][x] = 2;
		push(x, y-1);
	}


	//아래
	if (y+1<N && temp_index[y + 1][x]==0 )
	{
		temp_index[y + 1][x] = 2;
		push(x, y + 1);
	}

	//좌
	if (x-1>=0 && temp_index[y][x-1] == 0)
	{
		temp_index[y][x - 1] = 2;
		push(x-1, y);
	}

	//우
	if (x+1<M && temp_index[y][x+1] == 0 )
	{
		temp_index[y][x + 1] = 2;
		
		push(x+1, y);
	}



	while (isEmpty())
	{
		int* a = pop();
		int x = *(a + 0);
		int y = *(a + 1);
	

		go_virus(x, y);
	}
		


	//bfs 끝나면 바이러스확산안된 0 계산

	
	

}



int sol(int a, int b, int byuk_count , int end_count)
{
	//벽 개수 다 쓸때까지 수행
	if (end_count >=3)
	{
		
		//다 쓰면 바이러스 확산시키고 계산
		for (int i = 0; i < b_count; i++) {
			virus_visit[b_curX[i]][b_curY[i]] = 1;
			go_virus(b_curX[i], b_curY[i]);
		}

			mycalc();

			front = -1;
			end = -1;
			for (int i = 0; i<N; i++)
				for (int j = 0; j < M; j++)
				{

					temp_index[i][j] = index[i][j];
				}

			return 0;
		}
		
	

	//dfs 시작
	if(end_count<3)
	for (int i = 0; i < zero_count; i++) {
		if (index[zero_curY[i]][zero_curX[i]] == 0)
		{
			index[zero_curY[i]][zero_curX[i]] = 1;
			sol(0, 0, 0, end_count + 1);
			index[zero_curY[i]][zero_curX[i]] = 0;
		}
	}
	//
	



	return 0;
}
int main()
{
	scanf("%d %d", &N, &M);
	
	for (int y = 0; y < N; y++)
	{
		for (int x = 0; x < M; x++) {
			scanf("%d", &index[y][x]);
			if (index[y][x] == 2)
			{
				b_curX[b_count] = x;
				b_curY[b_count] = y;
				b_count++;
			}
			else if (index[y][x] == 0)
			{
				
				 zero_curX[zero_count] = x;
				 zero_curY[zero_count] = y;
				 zero_count++;
			}
		}
	}
	for (int i = 0; i<N; i++)
		for (int j = 0; j < M; j++)
		{

			temp_index[i][j] = index[i][j];
		}



	//for문으로 ?
		sol(0, 0, 0, 0);
		printf("%d", max);

	return 0;
}
